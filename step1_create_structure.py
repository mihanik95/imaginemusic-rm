# step1_create_structure.py
import os, re, json, subprocess, shutil
from PyQt6.QtWidgets import (
    QWidget, QVBoxLayout, QLabel, QListWidget, QTextEdit,
    QPushButton, QMessageBox, QHBoxLayout
)
from PyQt6.QtCore import Qt
from PyQt6.QtMultimedia import QSoundEffect
from PyQt6.QtCore import QUrl

from util_json import load_json_safe

CONFIG_FILE  = "config.json"
SESSION_FILE = "session.json"


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ util ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def get_track_duration(file_path: str) -> float | None:
    try:
        r = subprocess.run(
            ["ffprobe", "-v", "error",
             "-show_entries", "format=duration",
             "-of", "default=noprint_wrappers=1:nokey=1", file_path],
            text=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE
        )
        return round(float(r.stdout.strip()), 2)
    except Exception:
        return None


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –®–ê–ì¬†1 ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class Step1CreateStructure(QWidget):
    """–®–∞–≥¬†1¬†‚Äî —Å–æ–∑–¥–∞—ë–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∞–ª—å–±–æ–º–∞ –∏ session.json."""

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ UI ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    def __init__(self, main_app):
        super().__init__()
        self.main_app = main_app

        lay = QVBoxLayout(self)                 # –æ–±—â–∏–µ ¬´–Ω—É–ª–µ–≤—ã–µ¬ª –æ—Ç—Å—Ç—É–ø—ã
        lay.setContentsMargins(0, 0, 0, 0)
        lay.setSpacing(8)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("–®–ê–ì¬†1:¬†–°–¢–†–£–ö–¢–£–†–ê¬†–ê–õ–¨–ë–û–ú–ê",
                       alignment=Qt.AlignmentFlag.AlignCenter)
        title.setStyleSheet("font-size:22pt;font-weight:600;margin-bottom:8px;")
        lay.addWidget(title)

        # –í—ã–±–æ—Ä –∞–ª—å–±–æ–º–∞
        lay.addWidget(QLabel("üìÇ¬†–í—ã–±–µ—Ä–∏—Ç–µ –∞–ª—å–±–æ–º –∏–∑ _–ù–ï–ì–û–¢–û–í–´–ï:"))
        self.album_list = QListWidget()
        lay.addWidget(self.album_list)

        self.select_button = QPushButton("‚úÖ¬†–í—ã–±—Ä–∞—Ç—å –∞–ª—å–±–æ–º",
                                         clicked=self.process_selected_album)
        lay.addWidget(self.select_button)

        # –õ–æ–≥
        self.log_output = QTextEdit(readOnly=True)
        lay.addWidget(self.log_output)

        # –ü–æ–¥—Å–∫–∞–∑–∫–∞
        self.description = QLabel(
            "–û–ø–∏—Å–∞–Ω–∏–µ —à–∞–≥–∞: –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞–ª—å–±–æ–º, –Ω–∞—Ö–æ–¥–∏—Ç –ø–∞–ø–∫—É "
            "_MASTERED, –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–¥, –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤, —Å–æ–∑–¥–∞—ë—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É "
            "–ø–∞–ø–æ–∫ –≤ _ALL¬†ALBUMS¬†AIFF/MP3 –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å—ë –≤ session.json. \n\n"
            "–í–∞—à–∞ –∑–∞–¥–∞—á–∞¬†‚Äì –æ—Ç–º–µ—Ç–∏—Ç—å –Ω—É–∂–Ω—ã–π –∞–ª—å–±–æ–º –≤ —Å–ø–∏—Å–∫–µ –∏ –Ω–∞–∂–∞—Ç—å ¬´–í—ã–±—Ä–∞—Ç—å –∞–ª—å–±–æ–º¬ª, "
            "–∑–∞—Ç–µ–º —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å _MASTERED, –Ω–∏ –æ–¥–∏–Ω "
            "—Ç—Ä–µ–∫ –Ω–µ –ø–æ—Ç–µ—Ä—è–Ω, –∞ BPM —É–∫–∞–∑–∞–Ω—ã –≤–µ—Ä–Ω–æ.",
            wordWrap=True
        )
        self.description.setStyleSheet("margin-top:8px;")
        lay.addWidget(self.description)

        # ‚îÄ‚îÄ –Ω–∞–≤–∏–≥–∞—Ü–∏—è (—Å—Ç–∏–ª—å —à–∞–≥–∞¬†4) ‚îÄ‚îÄ
        nav = QHBoxLayout()
        self.next_button = QPushButton("‚û°¬†–°–ª–µ–¥—É—é—â–∏–π¬†—à–∞–≥")
        self.next_button.setEnabled(False)      # –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Å—Ä–∞–∑—É, –Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω
        self.next_button.clicked.connect(self.go_to_next_step)

        back_btn = QPushButton("‚¨Ö¬†–ù–∞–∑–∞–¥")
        back_btn.clicked.connect(self.go_back)

        nav.addWidget(self.next_button)
        nav.addWidget(back_btn)
        lay.addLayout(nav)

        # ‚îÄ‚îÄ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ ‚îÄ‚îÄ
        self.selected_album = self.album_code = self.album_name = None
        self.track_list, self.tracks_data = [], []

        self.load_settings()
        self.load_albums()

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ / –∞–ª—å–±–æ–º—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    def load_settings(self):
        cfg_path = CONFIG_FILE                         # –ª–∏–±–æ rsrc(CONFIG_FILE)
        self.paths = load_json_safe(cfg_path, {})      # ‚Üê –æ–¥–Ω–æ —Å–ª–æ–≤–æ

    def load_albums(self):
        self.album_list.clear()
        if "_–ù–ï–ì–û–¢–û–í–´–ï" in self.paths:
            p = self.paths["_–ù–ï–ì–û–¢–û–í–´–ï"]
            if os.path.exists(p):
                self.album_list.addItems(
                    d for d in os.listdir(p) if os.path.isdir(os.path.join(p, d))
                )
            else:
                self.log("‚ùå¬†–ü–∞–ø–∫–∞ _–ù–ï–ì–û–¢–û–í–´–ï –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ª–æ–≥–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    def log(self, msg: str): self.log_output.append(msg)

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    def process_selected_album(self):
        item = self.album_list.currentItem()
        if not item:
            self.log("‚ùå¬†–í—ã–±–µ—Ä–∏—Ç–µ –∞–ª—å–±–æ–º!"); return

        self.selected_album = item.text()
        album_path = os.path.join(self.paths["_–ù–ï–ì–û–¢–û–í–´–ï"], self.selected_album)
        mastered_path = os.path.join(album_path, "_MASTERED")
        self.log(f"\nüîπ¬†–í—ã–±—Ä–∞–Ω –∞–ª—å–±–æ–º: {self.selected_album}")

        if not os.path.exists(mastered_path):
            self.show_error("–û—à–∏–±–∫–∞! –í –ø–∞–ø–∫–µ –∞–ª—å–±–æ–º–∞ –Ω–µ—Ç _MASTERED.")
            self.log("‚ùå¬†–ù–µ—Ç _MASTERED."); return

        self.log("üìÇ¬†–ù–∞–π–¥–µ–Ω–∞ _MASTERED, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é‚Ä¶")
        mastered_tracks = [
            f for f in os.listdir(mastered_path)
            if re.match(r'IMG\d{3} - .* - \d{2} .*\.aif{1,2}$', f)
        ]
        if not mastered_tracks:
            self.show_error("–û—à–∏–±–∫–∞! –í _MASTERED –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ç—Ä–µ–∫–æ–≤.")
            self.log("‚ùå¬†–ù–µ—Ç —Ç—Ä–µ–∫–æ–≤."); return

        self.log(f"‚úÖ¬†–ù–∞–π–¥–µ–Ω–æ {len(mastered_tracks)} —Ç—Ä–µ–∫–æ–≤:")
        for t in mastered_tracks: self.log(f"   üéµ¬†{t}")

        m = re.match(r'(IMG\d{3}) - (.*?) - \d{2} .*', mastered_tracks[0])
        if not m:
            self.show_error("–û—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–¥ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–ª—å–±–æ–º–∞.")
            self.log("‚ùå¬†–ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å –∫–æ–¥/–Ω–∞–∑–≤–∞–Ω–∏–µ."); return
        self.album_code, self.album_name = m.groups()
        self.track_list = sorted(mastered_tracks)

        self.log(f"üìå¬†–ö–æ–¥: {self.album_code}")
        self.log(f"üìå¬†–ù–∞–∑–≤–∞–Ω–∏–µ: {self.album_name}")

        self.tracks_data.clear()
        for track_file in self.track_list:
            tm = re.match(r'(IMG\d{3}) - (.*?) - (\d{2}) (.*)\.aif{1,2}$', track_file)
            if not tm: continue
            _, _, track_number, track_name = tm.groups()

            full_path = os.path.join(mastered_path, track_file)
            duration  = get_track_duration(full_path)

            poss = os.listdir(album_path)
            track_folder = next((x for x in poss if track_name in x), None)
            if track_folder and (fm := re.match(r'(.+?) - (.+) (\d+)$', track_folder)):
                composer_full, _, bpm = fm.groups()
                composers = [c.strip() for c in composer_full.split(" and ")]
            else:
                composers = ["–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"]; bpm = "000"

            self.tracks_data.append({
                "track_number": track_number,
                "track_name": track_name,
                "composers": composers,
                "track_bpm": bpm,
                "duration": duration,
                "mastered_file": track_file
            })

        self.create_album_folders(album_path)
        self.show_success_popup()
        self.next_button.setEnabled(True)   # ‚Üê —Ç–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º
        self.next_button.setStyleSheet("background-color: #388E3C; color: white; font-weight: bold;")
        # –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –∑–≤—É–∫
        self.next_step_sound = QSoundEffect()
        self.next_step_sound.setSource(QUrl.fromLocalFile("notify.wav"))
        self.next_step_sound.setVolume(0.5)
        self.next_step_sound.play()

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    #             —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã IMG¬†PART –∏ –ø–∞–ø–æ–∫ –∞–ª—å–±–æ–º–∞
    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    def find_or_create_img_part(self, base_path: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â—É—é _IMG PART¬†X (–º–∞–∫—Å 5 –∞–ª—å–±–æ–º–æ–≤) –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é."""
        parts = sorted(
            [d for d in os.listdir(base_path) if re.match(r'_IMG PART \d+', d)],
            key=lambda x: int(x.split()[-1])
        )
        if not parts:
            new_part = os.path.join(base_path, "_IMG PART 1")
            os.makedirs(new_part)
            return new_part

        last_part = os.path.join(base_path, parts[-1])
        if len([d for d in os.listdir(last_part) if os.path.isdir(os.path.join(last_part, d))]) < 5:
            return last_part

        new_num = int(parts[-1].split()[-1]) + 1
        new_part = os.path.join(base_path, f"_IMG PART {new_num}")
        os.makedirs(new_part)
        return new_part

    def create_album_folders(self, album_path_negotovoe: str):
        """–°–æ–∑–¥–∞—ë—Ç –≤—Å–µ –Ω—É–∂–Ω—ã–µ –ø–∞–ø–∫–∏ (c –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å—é) –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç session.json."""
        ai_parent = self.find_or_create_img_part(self.paths["_ALL ALBUMS AIFF"])
        mp_parent = self.find_or_create_img_part(self.paths["_ALL ALBUMS MP3"])

        album_aiff = os.path.join(ai_parent, f"{self.album_code} {self.album_name}")
        album_mp3  = os.path.join(mp_parent,  f"{self.album_code} {self.album_name}")

        # ‚îÄ‚îÄ –µ—Å–ª–∏ –∫–∞—Ç–∞–ª–æ–≥–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        if os.path.exists(album_aiff) or os.path.exists(album_mp3):
            ask = QMessageBox.question(
                self, "–ü–∞–ø–∫–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç",
                "–ö–∞—Ç–∞–ª–æ–≥–∏ –∞–ª—å–±–æ–º–∞ —É–∂–µ –µ—Å—Ç—å –≤ _ALL ALBUMS.\n"
                "–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –∏—Ö (—Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã)?",
                QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
                QMessageBox.StandardButton.No
            )
            if ask == QMessageBox.StandardButton.No:
                self.log("‚ö†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."); return

            # —É–¥–∞–ª—è–µ–º –∏ –ª–æ–≥–∏—Ä—É–µ–º
            for p in (album_aiff, album_mp3):
                if os.path.exists(p):
                    shutil.rmtree(p)
                    self.log(f"‚ôªÔ∏è –£–¥–∞–ª—ë–Ω —Å—Ç–∞—Ä—ã–π –∫–∞—Ç–∞–ª–æ–≥: {p}")

        # ‚îÄ‚îÄ —Å–æ–∑–¥–∞—ë–º –∑–∞–Ω–æ–≤–æ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        os.makedirs(album_aiff, exist_ok=True)
        os.makedirs(album_mp3,  exist_ok=True)

        stems_path = os.path.join(album_aiff, "Stems")
        os.makedirs(stems_path, exist_ok=True)

        self.log(f"üìÇ –°–æ–∑–¥–∞–Ω—ã:\n  - {album_aiff}\n  - {album_mp3}\n  - {stems_path}")

        # –ø–æ–¥–ø–∞–ø–∫–∏ —Å—Ç–µ–º–æ–≤
        for tr in self.tracks_data:
            folder_name = f"{self.album_code} - {self.album_name} - {tr['track_number']} {tr['track_name']}"
            fp = os.path.join(stems_path, folder_name)
            os.makedirs(fp, exist_ok=True)
            tr["stems_folder"] = fp
            self.log(f"üìÅ –ü–∞–ø–∫–∞ —Å—Ç–µ–º–æ–≤: {fp}")

        # ‚îÄ‚îÄ session.json ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        with open(SESSION_FILE, "w", encoding="utf-8") as f:
            json.dump({
                "album_code":  self.album_code,
                "album_name":  self.album_name,
                "album_path_negotovoe": album_path_negotovoe,
                "album_path_aiff":     album_aiff,
                "album_path_mp3":      album_mp3,
                "stems_path":          stems_path,
                "tracks":              self.tracks_data
            }, f, indent=4, ensure_ascii=False)

        self.log("üíæ session.json —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚Äî –º–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ –®–∞–≥—É 2.")

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    #                     –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ –æ–∫–Ω–∞ / –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    def show_success_popup(self):
        tcount = len(self.tracks_data)

        # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–µ—Ä–µ—á–µ–Ω—å —Å—Ç—Ä–æ–∫ –≤–∏–¥–∞ ¬´01 Track Name (Composer, BPM=120)¬ª
        details = "\n".join(
            f"{t['track_number']} {t['track_name']} "
            f"({', '.join(t['composers'])}, BPM={t['track_bpm']})"
            for t in self.tracks_data
        )

        msg = QMessageBox(self)
        msg.setWindowTitle("üéµ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω")
        msg.setIcon(QMessageBox.Icon.Information)

        # –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç —Å—Ä–∞–∑—É —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ ‚Äî –Ω–∏—á–µ–≥–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Ä–∞—Å–∫—Ä—ã–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ
        msg.setText(f"–ù–∞–π–¥–µ–Ω–æ —Ç—Ä–µ–∫–æ–≤: {tcount}\n\n{details}")
        msg.exec()

    def show_error(self, text: str):
        m = QMessageBox()
        m.setWindowTitle("‚ùå¬†–û—à–∏–±–∫–∞")
        m.setText(text)
        m.setIcon(QMessageBox.Icon.Critical)
        m.exec()

    def go_to_next_step(self):
        from step2_process_stems import Step2ProcessStems
        w = Step2ProcessStems(self.main_app)
        self.main_app.stack.addWidget(w)
        self.main_app.stack.setCurrentWidget(w)

    def go_back(self):
        self.main_app.stack.setCurrentWidget(self.main_app.main_menu)