# step2_process_stems.py
"""
–®–∞–≥¬†2¬†‚Äî –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–µ–º–æ–≤:
  ‚Ä¢ –∏—â–µ–º/–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–µ–º‚Äë—Ñ–∞–π–ª—ã,
  ‚Ä¢ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∏, –≥–¥–µ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –ª–∏—à–Ω–∏–µ —Å—Ç–µ–º—ã,
  ‚Ä¢ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ session.json.
"""
import os, re, json, subprocess
from PyQt6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QLabel, QPushButton, QTextEdit,
    QMessageBox, QLineEdit, QDialog
)
from PyQt6.QtCore import Qt
from PyQt6.QtGui  import QCursor
from PyQt6.QtMultimedia import QSoundEffect
from PyQt6.QtCore import QUrl

SESSION_FILE     = "session.json"
IGNORE_KEYWORDS  = ["mix", "full mix", "unmastered", "mastered", "master", "bpm"]
AUDIO_EXTENSIONS = (".wav", ".aif", ".aiff")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def show_error(title: str, text: str):
    m = QMessageBox(); m.setWindowTitle(title); m.setText(text)
    m.setIcon(QMessageBox.Icon.Critical); m.exec()

def load_session():
    if not os.path.exists(SESSION_FILE):
        show_error("–û—à–∏–±–∫–∞", f"–ù–µ –Ω–∞–π–¥–µ–Ω {SESSION_FILE}. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –®–∞–≥¬†1.")
        return None
    with open(SESSION_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def is_stem(fn: str, track: str) -> bool:
    low, base = fn.lower(), os.path.splitext(fn.lower())[0]
    if os.path.splitext(low)[1] not in AUDIO_EXTENSIONS:     return False
    if "pdf" in low or any(k in low for k in IGNORE_KEYWORDS): return False
    return base.strip() != track.lower().strip()

def do_ffmpeg_convert(src: str, dst: str) -> bool:
    try:
        subprocess.run(
            ["ffmpeg", "-y", "-i", src, "-c:a", "pcm_s24be", "-ar", "48000", dst],
            check=True
        ); return True
    except Exception as e:
        print(f"FFmpeg error: {e}"); return False

def clean_stem_name(fname: str, track: str) -> str:
    base, _ = os.path.splitext(fname)
    tmp = re.sub(re.escape(track), "", base, flags=re.IGNORECASE)
    tmp = re.sub(r"(?i)\bstem\b|\b\d{2,3}\b", "", tmp)
    tmp = re.sub(r"[_,\-.]", " ", tmp).replace("&", "AND")
    tmp = re.sub(r"\s{2,}", " ", tmp)
    return tmp.strip().upper()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –¥–∏–∞–ª–æ–≥ –ø—Ä–æ–≤–µ—Ä–∫–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class StemsCheckDialog(QDialog):
    """–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–µ–º–æ–≤."""
    def __init__(self, track_key: str, stems: list[dict], parent=None):
        super().__init__(parent)
        self.setWindowTitle("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–µ–º–æ–≤")
        self.corrected_stems: list[dict] = []

        lay = QVBoxLayout(self)
        lay.addWidget(QLabel(f"–¢—Ä–µ–∫: {track_key}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–µ–º–æ–≤: {len(stems)}"))

        self.rows = []                           # (line_edit, stem_obj, del_btn)
        for st in stems:
            row = QHBoxLayout()
            le  = QLineEdit(st["stem"], self)
            btn = QPushButton("‚ùå", clicked=lambda _=None, l=le, s=st, b=None: self._del(l, s, b))
            btn.setFixedWidth(30); btn.setCursor(QCursor(Qt.CursorShape.PointingHandCursor))
            row.addWidget(le); row.addWidget(btn); lay.addLayout(row)
            self.rows.append((le, st, btn))

        ok = QPushButton("OK", clicked=self.on_ok)
        lay.addWidget(ok)

    def _del(self, le, st, _):
        if os.path.exists(st["old_path"]): os.remove(st["old_path"])
        st["__delete__"] = True; le.hide()

    def on_ok(self):
        for le, st, _ in self.rows:
            if not st.get("__delete__"):
                st["stem"] = le.text().strip()
                self.corrected_stems.append(st)
        self.accept()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –æ—Å–Ω–æ–≤–Ω–æ–π –≤–∏–¥–∂–µ—Ç —à–∞–≥–∞¬†2 ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class Step2ProcessStems(QWidget):
    def __init__(self, main_app):
        super().__init__()
        self.main_app = main_app
        self.session_data: dict | None = None
        self.setLayout(self._ui())

    # ‚îÄ‚îÄ‚îÄ UI ‚îÄ‚îÄ‚îÄ
    def _ui(self):
        lo = QVBoxLayout()
        lo.setContentsMargins(0, 0, 0, 0)
        lo.setSpacing(8)

        title = QLabel("–®–ê–ì¬†2:¬†–°–¢–ï–ú–´", alignment=Qt.AlignmentFlag.AlignCenter)
        title.setStyleSheet("font-size:22pt;font-weight:600;margin-bottom:8px;")
        lo.addWidget(title)

        # –ª–æ–≥
        self.log_output = QTextEdit(readOnly=True)
        lo.addWidget(self.log_output)

        # run‚Äë–∫–Ω–æ–ø–∫–∞
        self.run_btn = QPushButton("‚úÖ¬†–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ —Å—Ç–µ–º–æ–≤", clicked=self.run_step2)
        lo.addWidget(self.run_btn)

        # –æ–ø–∏—Å–∞–Ω–∏–µ
        desc = QLabel(
            "–û–ø–∏—Å–∞–Ω–∏–µ —à–∞–≥–∞: –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∞—Ö–æ–¥–∏—Ç —Å—Ç–µ–º—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç—Ä–µ–∫–∞, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∏—Ö "
            "–≤ AIFF¬†24¬†bit/48¬†kHz –∏ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç –∏—Ö –≤ –∞–ª—å–±–æ–º (_ALL¬†ALBUMS¬†AIFF), "
            "–∞ —Ç–∞–∫–∂–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç –∏—Ö —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É.\n\n"
            "–í–∞—à–∞ –∑–∞–¥–∞—á–∞¬†‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–µ–º–æ–≤ (–∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ–ø–µ—á–∞—Ç–∫–∏) –∏ —É–±–µ–¥–∏—Ç—å—Å—è, "
            "—á—Ç–æ –ª–∏—à–Ω–∏–µ —Ñ–∞–π–ª—ã –Ω–µ –ø–æ–ø–∞–ª–∏ –≤ —Å–ø–∏—Å–æ–∫. –ù–µ–Ω—É–∂–Ω—ã–µ —É–¥–∞–ª—è–π—Ç–µ –∫–Ω–æ–ø–∫–æ–π¬†‚ùå. "
            "–•–æ—Ä–æ—à–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞¬†‚Äî —Å–≤–µ—Ä–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–µ–º–æ–≤ –≤ _–ù–ï–ì–û–¢–û–í–´–ï –∏ "
            "–≤¬†_AIFF, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –Ω–∏ –æ–¥–∏–Ω —Ñ–∞–π–ª –Ω–µ –ø–æ—Ç–µ—Ä—è–ª—Å—è.",
            wordWrap=True
        )
        desc.setStyleSheet("margin-top:8px;")
        lo.addWidget(desc)

        # –Ω–∞–≤–∏–≥–∞—Ü–∏—è
        nav = QHBoxLayout()
        self.next_btn = QPushButton("‚û°¬†–°–ª–µ–¥—É—é—â–∏–π¬†—à–∞–≥", enabled=False,
                                    clicked=self.go_to_next_step)
        back_btn = QPushButton("‚¨Ö¬†–ù–∞–∑–∞–¥", clicked=self.go_back)
        nav.addWidget(self.next_btn); nav.addWidget(back_btn)
        lo.addLayout(nav)
        return lo

    def log(self, t: str): self.log_output.append(t)

    # ‚îÄ‚îÄ‚îÄ –ª–æ–≥–∏–∫–∞ —à–∞–≥–∞ ‚îÄ‚îÄ‚îÄ
    def run_step2(self):
        session = load_session()
        if not session:
            self.log("‚ùå –ù–µ—Ç session.json"); return
        self.session_data = session

        album_code  = session.get("album_code", "IMG000")
        album_name  = session.get("album_name", "Unknown")
        album_path  = session.get("album_path_negotovoe", "")
        tracks_info = session.get("tracks", [])

        if not os.path.isdir(album_path):
            show_error("–û—à–∏–±–∫–∞", f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞ –∞–ª—å–±–æ–º–∞:\n{album_path}"); return

        self.log(f"üéµ {album_code}¬†‚Äì¬†{album_name}")
        stems_map, album_folders = {}, os.listdir(album_path)

        # –ø–æ–∏—Å–∫ —Å—Ç–µ–º–æ–≤
        for trk in tracks_info:
            tnum, tname = trk.get("track_number", "00"), trk.get("track_name", "Unknown")
            stems_folder = trk.get("stems_folder", "")
            track_key = f"{tnum} {tname}"

            real = next((x for x in album_folders if tname.lower() in x.lower()), None)
            if not real:
                self.log(f"‚ö†Ô∏è –ù–µ—Ç –ø–∞–ø–∫–∏ –¥–ª—è ¬´{track_key}¬ª"); stems_map[track_key] = []; continue
            cand = [os.path.join(album_path, real)]
            sub  = os.path.join(cand[0], "Stems");  cand.append(sub) if os.path.isdir(sub) else None

            processed, stems = set(), []
            for c in cand:
                for root, dirs, files in os.walk(c):
                    if "archive" in dirs: dirs.remove("archive")
                    for f in files:
                        if not is_stem(f, tname) or f in processed: continue
                        processed.add(f)

                        short  = clean_stem_name(f, tname)
                        prefix = f"{album_code} - {album_name} - {tnum} {tname} "
                        ext    = ".aiff"
                        src, dst = os.path.join(root, f), os.path.join(stems_folder, prefix+short+ext)

                        self.log(f"üîÑ {f} ‚Üí {os.path.basename(dst)}")
                        if do_ffmpeg_convert(src, dst):
                            stems.append({"old_path": dst, "prefix": prefix, "stem": short, "ext": ext})
            stems_map[track_key] = stems

        # –¥–∏–∞–ª–æ–≥–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
        updated = {}
        for track_key, lst in stems_map.items():
            if not lst:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ—Ç —Å—Ç–µ–º–æ–≤ –¥–ª—è ¬´{track_key}¬ª."); return
            dlg = StemsCheckDialog(track_key, lst, self)
            updated[track_key] = lst if dlg.exec() != QDialog.DialogCode.Accepted else dlg.corrected_stems

        # –∏—Ç–æ–≥–æ–≤–æ–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
        for tr in tracks_info:
            key = f"{tr['track_number']} {tr['track_name']}"
            for st in updated.get(key, []):
                old = st["old_path"]
                new = os.path.join(os.path.dirname(old), st["prefix"]+st["stem"]+st["ext"])
                if new != old and os.path.exists(old):
                    try: os.rename(old, new); st["old_path"] = new
                    except Exception as e: self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è: {e}")
            tr["stems"] = [os.path.basename(s["old_path"]) for s in updated.get(key, [])]

        # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é
        session["tracks"] = tracks_info
        with open(SESSION_FILE, "w", encoding="utf-8") as f: json.dump(session, f, indent=4)

        self.log("‚úÖ –®–∞–≥¬†2 –∑–∞–≤–µ—Ä—à—ë–Ω!")
        self.next_btn.setEnabled(True)
        self.next_btn.setStyleSheet("background-color: #388E3C; color: white; font-weight: bold;")
        self.next_step_sound = QSoundEffect()
        self.next_step_sound.setSource(QUrl.fromLocalFile("notify.wav"))
        self.next_step_sound.setVolume(0.5)
        self.next_step_sound.play()

    # ‚îÄ‚îÄ‚îÄ –Ω–∞–≤–∏–≥–∞—Ü–∏—è ‚îÄ‚îÄ‚îÄ
    def go_to_next_step(self):
        from step3_composer_match import Step3ComposerMatch
        w = Step3ComposerMatch(self.main_app)
        self.main_app.stack.addWidget(w)
        self.main_app.stack.setCurrentWidget(w)

    def go_back(self):
        self.main_app.stack.setCurrentWidget(self.main_app.main_menu)
